{"version":3,"file":"paypal-e560f6dd.js","sources":["../../../../stores/paypal.ts"],"sourcesContent":["import { defineStore } from 'pinia'  \nimport { usePedidoStore } from '@/stores/pedido'; \nimport { loadScript } from \"@paypal/paypal-js\";\nimport { Pedido } from '~~/types/interfaces';  \nimport moment from 'moment';\n\nexport const usePaypalStore = defineStore('paypal',  () => { \n    const { createItems, updateItem } = useDirectusItems(); \n    const storePedido = usePedidoStore(); \n    const totalPedido = storePedido.pedido.total; \n\n    const router = useRouter();\n    //  SANDBOX API \"client-id\": \"Aa2-lyJOfSxdyNqdMX_91EI24gW16qkYhzIJKxg4rq_dYC5HFDz7Sjb5FUp_UZ54dFDQ46lNQ2ykix-u\",\n    //       \"client-id\": \"AauU5ZBGbHQmw4NSSD3m8p_JC5an_3cscA7RZ52dH0YBZsKa5Za-X8aPlxf1FkowqAb0phFjjETUUnCl\",\n    loadScript({ \n      \"client-id\": \"AauU5ZBGbHQmw4NSSD3m8p_JC5an_3cscA7RZ52dH0YBZsKa5Za-X8aPlxf1FkowqAb0phFjjETUUnCl\",\n      \"currency\": \"USD\",\n      \"data-page-type\": \"checkout\",\n    }).then((paypal) => {\n      \n          paypal.Buttons({\n                  createOrder: function(data, actions) {\n                    const storePedido = usePedidoStore(); \n                    const totalPedido = storePedido.pedido.total; \n                \n                  // Set up the transaction\n                    return actions.order.create({\n                      purchase_units: [{\n                        amount: { \n                            value: totalPedido\n                          // value: '88.88'\n                        },\n\n                      description: 'Renta de Auto '\n                                    + storePedido.pedido.carro.modelo + ' o '+ storePedido.pedido.carro.clasificacion \n                                    + ' - '+ storePedido.pedido.cobertura.nombre,\n                      custom_id: 'Hertz Rent a Car',\n                      // // invoice_id: 'INV-0001',\n                      soft_descriptor: 'Hertz Rent a Car',\n                      // items: [\n                      //     {\n                      //         name: 'Renta de Auto',\n                      //         quantity: '1',\n                      //         unit_amount: {\n                      //             currency_code: 'USD',\n                      //             value: totalPedido\n                      //         },\n                      //         category: 'PHYSICAL_GOODS'\n                      //     }, \n                      // ], \n                  }]\n                        // payer: { \n                        //   payer_id: '',\n                        //   name: {\n                        //       given_name: '',\n                        //       surname: ''\n                        //     }, \n                        // },\n\n                        // Id. del formato de pagoThrifty-8351-ODM1MQ==OV\n \n                    });\n                  },\n                  onApprove: function(data, actions) {\n                    // This function captures the funds from the transaction.\n                    return actions.order.capture().then(function(details) {\n                      // This function shows a transaction success message to your buyer.\n                    \n                      var items: Pedido[] = [\n                        {\n                          nombre: storePedido.pedido.cliente.nombre,\n                          apellido: storePedido.pedido.cliente.apellido, \n                          email: storePedido.pedido.cliente.email,\n                          telefono: storePedido.pedido.cliente.telefono, \n                          licencia: storePedido.pedido.cliente.licencia,\n                          nacimiento:  storePedido.pedido.cliente.nacimiento,\n                          retiro: storePedido.pedido.sucursal.name,\n                          fecha_retiro:  moment(storePedido.pedido.diaRetiro).format(),  \n                          retorno: storePedido.pedido.sucursalRetorno.name,\n                          fecha_retorno:  moment(storePedido.pedido.diaRetorno).format(), \n                          carro: storePedido.pedido.carro,\n                          cobertura: storePedido.pedido.cobertura,\n                          dropoff: storePedido.pedido.dropoff,\n                          sucursal_detail: storePedido.pedido.sucursal,\n                          sucursal_retorno_detail: storePedido.pedido.sucursalRetorno,\n                          extras: JSON.stringify(storePedido.pedido.extras), \n                          status: 'Pagado',\n                          tipo_pago: 'Paypal',\n                          total: totalPedido\n                        } \n                    ];  \n \n\n                    if (storePedido.pedido.pedidos_id !== \"\"){   \n  \n                      console.log('Transacci√≥n Aprobada' + storePedido.pedido.pedidos_id)    \n                      var status = { status: 'Pagado', tipo_pago: 'Paypal' }   \n                      updateItem<Pedido>({ \n                          collection: \"pedidos_hertz\",\n                          id: storePedido.pedido.pedidos_id,\n                          item: status });  \n                      \n                      router.push('/thanks/'); \n                    }\n                    createItems<Pedido>({ collection: \"pedidos_hertz\", items }); \n                    router.push('/thanks/');  \n                    });\n                  },\n                  onError: function (err) {\n                    // For example, redirect to a specific error page\n                    // hacer un mensaje/function de error quedar en la misma pagina\n                    // window.location.href = \"/error\";\n                  }\n              })    \n              .render(\"#paypal-button\")\n              .catch((error) => {\n                  console.error(\"failed to render the PayPal Buttons\", error);\n              }); \n      })\n      .catch((error) => {\n          console.error(\"failed to load the PayPal JS SDK script\", error);\n      });\n\n    return { \n    };\n});   "],"names":["moment"],"mappings":";;;;;;;;AAMO,MAAA,iBAAA,YAAA,UAAA,MAAA;AACH,QAAA,EAAA,aAAA,WAAA,IAAA,iBAAA;AACA,QAAA,cAAA;AACA,QAAA,cAAA,YAAA,OAAA;AAEA,QAAA,SAAA;AAGA,aAAA;AAAA,IAAW,aAAA;AAAA,IACI,YAAA;AAAA,IACD,kBAAA;AAAA,EACM,CAAA,EAAA,KAAA,CAAA,WAAA;AAGd,WAAA,QAAA;AAAA,MAAe,aAAA,SAAA,MAAA,SAAA;AAEL,cAAA,eAAA;AACA,cAAA,eAAA,aAAA,OAAA;AAGA,eAAA,QAAA,MAAA,OAAA;AAAA,UAA4B,gBAAA,CAAA;AAAA,YACT,QAAA;AAAA,cACP,OAAA;AAAA;AAAA,YACG;AAAA,YAEX,aAAA,mBAAA,aAAA,OAAA,MAAA,SAAA,QAAA,aAAA,OAAA,MAAA,gBAAA,QAAA,aAAA,OAAA,UAAA;AAAA,YAIkD,WAAA;AAAA;AAAA,YACzC,iBAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAEM,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAYpB,CAAA;AAAA,MAWE;AAAA,MACH,WAAA,SAAA,MAAA,SAAA;AAGE,eAAA,QAAA,MAAA,QAAA,EAAA,KAAA,SAAA,SAAA;AAGE,cAAA,QAAA;AAAA,YAAsB;AAAA,cACpB,QAAA,YAAA,OAAA,QAAA;AAAA,cACqC,UAAA,YAAA,OAAA,QAAA;AAAA,cACE,OAAA,YAAA,OAAA,QAAA;AAAA,cACH,UAAA,YAAA,OAAA,QAAA;AAAA,cACG,UAAA,YAAA,OAAA,QAAA;AAAA,cACA,YAAA,YAAA,OAAA,QAAA;AAAA,cACG,QAAA,YAAA,OAAA,SAAA;AAAA,cACJ,cAAAA,MAAA,YAAA,OAAA,SAAA,EAAA,OAAA;AAAA,cACuB,SAAA,YAAA,OAAA,gBAAA;AAAA,cACf,eAAAA,MAAA,YAAA,OAAA,UAAA,EAAA,OAAA;AAAA,cACiB,OAAA,YAAA,OAAA;AAAA,cACnC,WAAA,YAAA,OAAA;AAAA,cACI,SAAA,YAAA,OAAA;AAAA,cACF,iBAAA,YAAA,OAAA;AAAA,cACQ,yBAAA,YAAA,OAAA;AAAA,cACQ,QAAA,KAAA,UAAA,YAAA,OAAA,MAAA;AAAA,cACI,QAAA;AAAA,cACxC,WAAA;AAAA,cACG,OAAA;AAAA,YACJ;AAAA,UACT;AAIJ,cAAA,YAAA,OAAA,eAAA,IAAA;AAEE,oBAAA,IAAA,yBAAA,YAAA,OAAA,UAAA;AACA,gBAAA,SAAA,EAAA,QAAA,UAAA,WAAA,SAAA;AACA,uBAAA;AAAA,cAAmB,YAAA;AAAA,cACH,IAAA,YAAA,OAAA;AAAA,cACW,MAAA;AAAA,YACjB,CAAA;AAEV,mBAAA,KAAA,UAAA;AAAA,UAAsB;AAExB,sBAAA,EAAA,YAAA,iBAAA,MAAA,CAAA;AACA,iBAAA,KAAA,UAAA;AAAA,QAAsB,CAAA;AAAA,MACrB;AAAA,MACH,SAAA,SAAA,KAAA;AAAA,MACwB;AAAA,IAIxB,CAAA,EAAA,OAAA,gBAAA,EAAA,MAAA,CAAA,UAAA;AAIA,cAAA,MAAA,uCAAA,KAAA;AAAA,IAA0D,CAAA;AAAA,EAC7D,CAAA,EAAA,MAAA,CAAA,UAAA;AAGL,YAAA,MAAA,2CAAA,KAAA;AAAA,EAA8D,CAAA;AAGpE,SAAA;AAEJ,CAAA;"}